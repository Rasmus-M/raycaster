sams_window:
       equ  >2000
sams_window_2:
       equ  >3000
sams_reg_2:
       equ  >4004
sams_reg_3:
       equ  >4006

*********************************************************************
*
* Initialize SAMS
*
init_sams:
*      Enable register access
       li   r12,>1e00
       sbo  0
*      Set standard mapping
       li   r0,>4000
       clr  r1
       li   r2,16
init_sams_1:
       mov  r1,*r0+
       ai   r1,>0100
       dec  r2
       jne  init_sams_1
*      Enable mapper
       sbo  1
       rt
*// init_sams

*********************************************************************
*
* Copy ROM bank to SAMS
*
* r0: ROM bank select address
* r1: SAMS page no (MSB)
*
* On return r0 is update to select next bank,
* and r1 is update to the next page (+2)
*
copy_rom_to_sams:
       .proc
       mov  r0,r3
       mov  r1,r4
       seto *r0
       li   r5,2
       li   r0,>6000
copy_rom_to_sams_1:
       mov  r4,@sams_reg_2
       li   r1,sams_window
       li   r2,>1000
       bl   @copy
       ai   r4,>0100
       dec  r5
       jne  copy_rom_to_sams_1
       mov  r3,r0
       inct r0
       mov  r4,r1
       .endproc
*// copy_rom_to_sams

*********************************************************************
*
* Copy ROM bank of textures to SAMS
*
* r0: ROM bank select address
* r1: SAMS page no (MSB)
*
* On return r0 is update to select next bank,
* and r1 is update to the next page (+8)
*
copy_textures_to_sams:
       .proc
       mov  r0,r3                      ; Copy ROM bank
       mov  r1,r4                      ; Copy SAMS page
       seto *r0                        ; Select ROM bank
       li   r5,8                       ; Number of SAMS pages
       li   r0,>6000                   ; Source address
copy_textures_to_sams_1:
       mov  r4,@sams_reg_2             ; Select SAMS page
       li   r1,sams_window             ; Destination address
       li   r2,>1000
       bl   @unpack_texture
       ai   r4,>0100                   ; Next SAMS page
       dec  r5                         ; Page counter
       jne  copy_textures_to_sams_1
       mov  r3,r0                      ; Restore ROM bank
       inct r0                         ; Increment ROM bank
       mov  r4,r1                      ; Restore SAMS page
       .endproc
*// copy_textures_to_sams

*********************************************************************
*
* Unpack texture
*
* r0: Source address
* r1: Destination address
*
unpack_texture:
       li   r6,texture_width/2
unpack_texture_1:
       li   r7,texture_height
unpack_texture_2:
       movb *r0+,r8
       mov  r8,r9
*      Even pixel left nybble
       andi r8,>f000
       movb r8,*r1
*      Even pixel right nybble
       srl  r8,4
       movb r8,@texture_size*2(r1)
*      Odd pixel right nybble
       andi r9,>0f00
       movb r9,@texture_size*2+texture_height(r1)
*      Odd pixel left nybble
       sla  r9,4
       movb r9,@texture_height(r1)
*      Next row
       inc  r1
       dec  r7
       jne   unpack_texture_2
*      Next column
       ai   r1,texture_height
       dec  r6
       jne   unpack_texture_1
       rt
*// unpack texture

*********************************************************************
*
* Copy background from ROM to SAMS
*
* r0: ROM bank select address
* r1: SAMS page no (MSB)
*
copy_background_to_sams:
       .proc
*      Copy ROM banks to SAMS
       li   r6,n_background_banks
       mov  r1,r7
copy_background_to_sams_1:
       bl   @copy_rom_to_sams
       dec  r6
       jne  copy_background_to_sams_1
*      Duplicate SAMS banks with masked values
       mov  r0,r8                      ; Save new ROM bank select
       mov  r7,r0                      ; First SAMS bank
       li   r6,n_background_banks*2    ; Number of pages to duplicate
copy_background_to_sams_2:
       mov  r0,@sams_reg_2             ; Select source page
       mov  r1,@sams_reg_3             ; Select destination page
       li   r2,>1000                   ; Counter for number of bytes in a page
       li   r3,sams_window             ; Source address
       li   r4,sams_window_2           ; Destination address
       li   r9,>0f00
       li   r13,>f000
copy_background_to_sams_3:
       movb *r3,r5                     ; Get source byte
       szcb r9,*r3+                    ; Isolate left nybble
       szcb r13,r5                     ; Isolate right nybble
       movb r5,*r4+                    ; Write to destination
       dec  r2                         ; Bytes counter
       jne  copy_background_to_sams_3  ; Next byte
       ai   r0,>0100                   ; Next source page
       ai   r1,>0100                   ; Next destination page
       dec  r6                         ; Page counter
       jne  copy_background_to_sams_2  ; Next page
       mov  r8,r0                      ; Restore new ROM bank select
       .endproc
*// copy_background_to_sams
